ifneq ($(words $(CURDIR)),1)
 $(error Unsupported: GNU Make cannot build in directories containing spaces, build elsewhere: '$(CURDIR)')
endif

VERILATOR = verilator
VERILATOR_COVERAGE = verilator_coverage

# Generate C++ in executable form
VERILATOR_FLAGS += -cc --exe -j 6 --threads 10
# Generate makefile dependencies (not shown as complicates the Makefile)
#VERILATOR_FLAGS += -MMD
# Optimize
VERILATOR_FLAGS += -x-assign fast
# Warn abount lint issues; may not want this on less solid designs
VERILATOR_FLAGS += -Wall
# Make waveforms
VERILATOR_FLAGS += --trace-fst --trace-structs --trace-threads 1
# Check SystemVerilog assertions
VERILATOR_FLAGS += --assert
# Generate coverage analysis
VERILATOR_FLAGS += --coverage
# Run Verilator in debug mode
#VERILATOR_FLAGS += --debug
# Add this trace to get a backtrace in gdb
#VERILATOR_FLAGS += --gdbbt 
VERILATOR_FLAGS += --build --hierarchical
VERILATOR_FLAGS += -CFLAGS "-I../../../vrf/ -I../../../sim_common/common/ -DTOP_NAME=tb_$* -lpthread" -DTO_SIM
VERILATOR_FLAGS += -LDFLAGS "-lpthread"

VERILATOR_INPUT = +librescan +libext+.v+.sv+.vh+.svh ../../vrf/tb_$*.sv -f ../input.vc ../../sim_common/common/tb.cpp ../../vrf/tb_$*.cpp

TESTS_LIST = 

SIM_ARGS =
ifneq ($(cycles),)
SIM_ARGS += +cycles=$(cycles)
endif
ifneq ($(trace),)
SIM_ARGS += +trace
endif

default: tb_top

obj_dir/V%:
	@echo "--- Verilator run ($*)  ---"
	@rm -rf logs_$* obj_dir
	$(VERILATOR) $(VERILATOR_FLAGS) $(VERILATOR_INPUT)

tb_%: obj_dir/V%
	@echo "--- Test $* running ---"
	obj_dir/V$@ $(SIM_ARGS)
ifneq ($(trace),)
	mv logs_$@/wave.fst ../$*.fst
endif
	rm -rf logs_top obj_dir fw.vh
	@echo "--- Test $* finished ---"
ifneq ($(trace),)
	gtkwave -a ../$*.gtkw -6 -7 $(GTK_FLAGS) ../$*.fst
endif

show-config:
	$(VERILATOR) -V

.ONESHELL:

test_%: $(work_dir_isa)/%.vh obj_dir/Vtb_top
	@echo "-------- Start $@ --------"
	TEST_NAME=$@
	cp $< fw.vh
	obj_dir/Vtb_top $(SIM_ARGS) +TEST_FW=fw.vh
	if [ $$? -ne 0 ]; then \
		echo "$(TEST_NAME) failure!"; \
		python ../../sim_common/results.py add "$(TEST_NAME)" "Failed"; \
		rm -rf obj_dir; \
		gtkwave -a ../top.gtkw -6 -7 $(GTK_FLAGS) logs_top/wave.fst; \
		exit 1; \
	fi
	echo "$@ success!"
	python ../../sim_common/results.py ../../results.json add "$@" "Pass"
	mv logs_top/wave.fst $@.fst
	mv trace.txt $@.txt
	rm -rf logs_top fw.vh
	@echo "--------------------------"

maintainer-copy::
clean mostlyclean distclean maintainer-clean::
	-rm -rf obj_dir logs *.log *.dmp *.vpd coverage.dat core

$(V).SILENT:
